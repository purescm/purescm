;; DO NOT EDIT THIS FILE!!
;; This inlined chez-srfi library code is autogenerated using command:
;; $ ./install.chezscheme.sps ../vendor
;; Source origin: https://github.com/arcfide/chez-srfi
;; Please refer to project site for full credits and original code.
;;;;;; File header: %3a146/gleckler/vector-edit.sls
;;;; `vector-edit'
(library (srfi :146 gleckler vector-edit)
  (export vector-edit vector-replace-one vector-without)
  (import (rnrs) (only (srfi :43) vector-copy! vector-copy))
  (define (vector-without v start end)
    "Return a copy of vector `v' without the elements with indices [start, end)."
    (let* ([size (vector-length v)]
           [gap-size (- end start)]
           [new-size (- size gap-size)]
           [result (make-vector new-size)])
      (vector-copy! result 0 v 0 start)
      (vector-copy! result start v end size)
      result))
  (define (vector-replace-one v i e)
    "Return a copy of vector `v' with the `i'th element replaced by `e'."
    (let ([result (vector-copy v)])
      (vector-set! result i e)
      result))
  (define-syntax vector-edit-total-skew
    (syntax-rules (add drop)
      [(_ s) s]
      [(_ s (add i e) . rest)
       (vector-edit-total-skew (+ s 1) . rest)]
      [(_ s (drop i c) . rest)
       (vector-edit-total-skew (- s c) . rest)]))
  (define-syntax vector-edit-code
    (syntax-rules (add drop)
      [(_ v r o s)
       (let ([index (vector-length v)])
         (vector-copy! r (+ o s) v o index)
         r)]
      [(_ v r o s (add i e) . rest)
       (let ([index i])
         (vector-copy! r (+ o s) v o index)
         (vector-set! r (+ s index) e)
         (let ([skew (+ s 1)])
           (vector-edit-code v r index skew . rest)))]
      [(_ v r o s (drop i c) . rest)
       (let ([index i])
         (vector-copy! r (+ o s) v o index)
         (let* ([dropped c]
                [offset (+ index dropped)]
                [skew (- s dropped)])
           (vector-edit-code v r offset skew . rest)))]))
  (define-syntax vector-edit
    (syntax-rules ()
      [(_ v . rest)
       (let ([result (make-vector
                       (+ (vector-length v)
                          (vector-edit-total-skew 0 . rest)))])
         (vector-edit-code v result 0 0 . rest))])))
